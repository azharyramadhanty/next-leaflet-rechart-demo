# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger: none

pr:
  branches:
    include:
      - dev
      - main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'ef03ad49-a4a6-4230-85ea-1477d6e633f6'
  imageRepository: 'frontend'
  containerRegistry: 'acrshareddatalakemvp.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  
  # Set environment based on PR target branch
  # ${{ if contains(variables['Build.SourceBranchName'], 'dev') }}:
  #   envName: 'prod'
  #   k8sNamespace: 'mvp-apps'
  # ${{ else }}:
  #   envName: 'dev'
  #   k8sNamespace: 'aks-ns-mvp-dev-apps'
  ${{ if eq(variables['Build.SourceBranchName'], 'dev') }}:
    envName: 'dev'
    k8sNamespace: 'aks-ns-mvp-dev-apps'
  ${{ elseif eq(variables['Build.SourceBranchName'], 'main') }}:
    envName: 'prod'
    k8sNamespace: 'mvp-apps'
  ${{ else }}:
    envName: 'dev'
    k8sNamespace: 'aks-ns-mvp-dev-apps'
  
  tag: '$(envName)-$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: $(envName).$(k8sNamespace)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            displayName: Update frontend deployment image
            inputs:
              command: set
              arguments: image deployment/frontend frontend=$(containerRegistry)/$(imageRepository):$(tag)
              namespace: $(k8sNamespace)
